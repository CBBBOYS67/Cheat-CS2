#pragma once

namespace ui {
    static std::string key_directory = R"(.\Data\SKSE\Plugins\resources\key)";

    enum class default_keys : uint32_t { key, total };

    inline static std::map<std::string, default_keys> default_key_icon_name_map = { { R"(Blank_Black_Normal.svg)",
        default_keys::key } };

    //scancodes (a selection)
    enum class key_values : uint32_t {
        escape = 1,
        one = 2,
        two = 3,
        three = 4,
        four = 5,
        five = 6,
        six = 7,
        seven = 8,
        eight = 9,
        nine = 10,
        zero = 11,
        minus = 12,
        //equals = 13,
        back = 14,
        tab = 15,
        q = 16,
        w = 17,
        e = 18,
        r = 19,
        t = 20,
        y = 21,
        u = 22,
        i = 23,
        o = 24,
        p = 25,
        lbracket = 26,
        rbracket = 27,
        RETURN = 28,
        lcontrol = 29,
        a = 30,
        s = 31,
        d = 32,
        f = 33,
        g = 34,
        h = 35,
        j = 36,
        k = 37,
        l = 38,
        semicolon = 39,
        lshift = 42,
        //backslash = 43,
        z = 44,
        x = 45,
        c = 46,
        v = 47,
        b = 48,
        n = 49,
        m = 50,
        //comma = 51,
        //period = 52,
        //slash = 53,
        rshift = 54,
        multiply = 55,
        lmenu = 56,
        space = 57,
        capital = 58,
        f1 = 59,
        f2 = 60,
        f3 = 61,
        f4 = 62,
        f5 = 63,
        f6 = 64,
        f7 = 65,
        f8 = 66,
        f9 = 67,
        f10 = 68,
        numlock = 69,
        numpad7 = 71,
        numpad8 = 72,
        numpad9 = 73,
        subtract = 74,
        numpad4 = 75,
        numpad5 = 76,
        numpad6 = 77,
        add = 78,
        numpad1 = 79,
        numpad2 = 80,
        numpad3 = 81,
        numpad0 = 82,
        f11 = 87,
        f12 = 88,
        numpadenter = 156,
        rcontrol = 157,
        rmenu = 184,
        home = 199,
        up = 200,
        prior = 201,
        left = 203,
        right = 205,
        end = 207,
        down = 208,
        next = 209,
        insert = 210,
        delete_key = 211,
        lwin = 219,
        rwin = 220,
        left_button = 256,
        right_button = 257,
        middle_button = 258,
        mouse_button_4 = 259,
        mouse_button_5 = 260,
        mouse_button_6 = 261,
        mouse_button_7 = 262,
        total
    };

    inline static std::map<std::string, key_values> key_icon_name_map = {
        { R"(0_Key_Dark.svg)", key_values::zero },
        { R"(1_Key_Dark.svg)", key_values::one },
        { R"(2_Key_Dark.svg)", key_values::two },
        { R"(3_Key_Dark.svg)", key_values::three },
        { R"(4_Key_Dark.svg)", key_values::four },
        { R"(5_Key_Dark.svg)", key_values::five },
        { R"(6_Key_Dark.svg)", key_values::six },
        { R"(7_Key_Dark.svg)", key_values::seven },
        { R"(8_Key_Dark.svg)", key_values::eight },
        { R"(9_Key_Dark.svg)", key_values::nine },
        { R"(0_Key_Dark.svg)", key_values::numpad0 },
        { R"(1_Key_Dark.svg)", key_values::numpad1 },
        { R"(2_Key_Dark.svg)", key_values::numpad2 },
        { R"(3_Key_Dark.svg)", key_values::numpad3 },
        { R"(4_Key_Dark.svg)", key_values::numpad4 },
        { R"(5_Key_Dark.svg)", key_values::numpad5 },
        { R"(6_Key_Dark.svg)", key_values::numpad6 },
        { R"(7_Key_Dark.svg)", key_values::numpad7 },
        { R"(8_Key_Dark.svg)", key_values::numpad8 },
        { R"(9_Key_Dark.svg)", key_values::numpad9 },
        { R"(F10_Key_Dark.svg)", key_values::f10 },
        { R"(F11_Key_Dark.svg)", key_values::f11 },
        { R"(F12_Key_Dark.svg)", key_values::f12 },
        { R"(A_Key_Dark.svg)", key_values::a },
        { R"(Alt_Key_Dark.svg)", key_values::lmenu },
        { R"(Alt_Key_Dark.svg)", key_values::rmenu },
        { R"(Arrow_Down_Key_Dark.svg)", key_values::down },
        { R"(Arrow_Left_Key_Dark.svg)", key_values::left },
        { R"(Arrow_Right_Key_Dark.svg)", key_values::right },
        { R"(Arrow_Up_Key_Dark.svg)", key_values::up },
        { R"(Asterisk_Key_Dark.svg)", key_values::multiply },
        { R"(B_Key_Dark.svg)", key_values::b },
        { R"(Backspace_Key_Dark.svg)", key_values::back },
        { R"(Bracket_Left_Key_Dark.svg)", key_values::lbracket },
        { R"(Bracket_Right_Key_Dark.svg)", key_values::rbracket },
        { R"(C_Key_Dark.svg)", key_values::c },
        { R"(Caps_Lock_Key_Dark.svg)", key_values::capital },
        { R"(Ctrl_Key_Dark.svg)", key_values::lcontrol },
        { R"(Ctrl_Key_Dark.svg)", key_values::rcontrol },
        { R"(D_Key_Dark.svg)", key_values::d },
        { R"(Del_Key_Dark.svg)", key_values::delete_key },
        { R"(E_Key_Dark.svg)", key_values::e },
        { R"(End_Key_Dark.svg)", key_values::end },
        { R"(Enter_Key_Dark.svg)", key_values::RETURN },
        { R"(Enter_Tall_Key_Dark.svg)", key_values::numpadenter },
        { R"(Esc_Key_Dark.svg)", key_values::escape },
        { R"(F_Key_Dark.svg)", key_values::f },
        { R"(F1_Key_Dark.svg)", key_values::f1 },
        { R"(F2_Key_Dark.svg)", key_values::f2 },
        { R"(F3_Key_Dark.svg)", key_values::f3 },
        { R"(F4_Key_Dark.svg)", key_values::f4 },
        { R"(F5_Key_Dark.svg)", key_values::f5 },
        { R"(F6_Key_Dark.svg)", key_values::f6 },
        { R"(F7_Key_Dark.svg)", key_values::f7 },
        { R"(F8_Key_Dark.svg)", key_values::f8 },
        { R"(F9_Key_Dark.svg)", key_values::f9 },
        { R"(G_Key_Dark.svg)", key_values::g },
        { R"(H_Key_Dark.svg)", key_values::h },
        { R"(Home_Key_Dark.svg)", key_values::home },
        { R"(I_Key_Dark.svg)", key_values::i },
        { R"(Insert_Key_Dark.svg)", key_values::insert },
        { R"(J_Key_Dark.svg)", key_values::j },
        { R"(K_Key_Dark.svg)", key_values::k },
        { R"(L_Key_Dark.svg)", key_values::l },
        { R"(M_Key_Dark.svg)", key_values::m },
        { R"(L_Key_Dark.svg)", key_values::m },
        /*{key_values::comma, R"(Mark_Left_Key_Dark.svg"},
        {key_values::period, R"(Mark_Right_Key_Dark.svg"},
        {key_values::backslash, R"(Question_Key_Dark.svg"},*/
        { R"(Minus_Key_Dark.svg)", key_values::minus },
        { R"(Minus_Key_Dark.svg)", key_values::subtract },
        { R"(Mouse_Left_Key_Dark.svg)", key_values::left_button },
        { R"(Mouse_Middle_Key_Dark.svg)", key_values::middle_button },
        { R"(Mouse_Right_Key_Dark.svg)", key_values::right_button },
        { R"(Mouse_Simple_Key_Dark.svg)", key_values::mouse_button_4 },
        { R"(Mouse_Simple_Key_Dark.svg)", key_values::mouse_button_5 },
        { R"(Mouse_Simple_Key_Dark.svg)", key_values::mouse_button_6 },
        { R"(Mouse_Simple_Key_Dark.svg)", key_values::mouse_button_7 },
        { R"(N_Key_Dark.svg)", key_values::n },
        { R"(Num_Lock_Key_Dark.svg)", key_values::numlock },
        { R"(O_Key_Dark.svg)", key_values::o },
        { R"(P_Key_Dark.svg)", key_values::p },
        { R"(Page_Down_Key_Dark.svg)", key_values::next },
        { R"(Page_Up_Key_Dark.svg)", key_values::prior },
        { R"(Plus_Key_Dark.svg)", key_values::add },
        { R"(Q_Key_Dark.svg)", key_values::q },
        { R"(R_Key_Dark.svg)", key_values::r },
        { R"(S_Key_Dark.svg)", key_values::s },
        { R"(Semicolon_Key_Dark.svg)", key_values::semicolon },
        { R"(Shift_Key_Dark.svg)", key_values::lshift },
        { R"(Shift_Key_Dark.svg)", key_values::rshift },
        //{ R"(Slash_Key_Dark.svg)", key_values::slash },
        { R"(Space_Key_Dark.svg)", key_values::space },
        { R"(T_Key_Dark.svg)", key_values::t },
        { R"(Tab_Key_Dark.svg)", key_values::tab },
        { R"(Tab_Key_Dark.svg)", key_values::t },
        { R"(U_Key_Dark.svg)", key_values::u },
        { R"(V_Key_Dark.svg)", key_values::v },
        { R"(W_Key_Dark.svg)", key_values::w },
        { R"(Win_Key_Dark.svg)", key_values::lwin },
        { R"(Win_Key_Dark.svg)", key_values::rwin },
        { R"(X_Key_Dark.svg)", key_values::x },
        { R"(Y_Key_Dark.svg)", key_values::y },
        { R"(Z_Key_Dark.svg)", key_values::z },
    };

    enum class gamepad_values : uint32_t {
        up = 266,
        down,
        left,
        right,
        start,
        back,
        left_thumb,
        right_thumb,
        left_shoulder,
        right_shoulder,
        a,
        b,
        x,
        y,
        left_trigger,
        right_trigger,
        total
    };

    inline static std::map<std::string, gamepad_values> gamepad_ps_icon_name_map = { { R"(PS5_Dpad_Up.svg)",
                                                                                         gamepad_values::up },
        { R"(PS5_Dpad_Down.svg)", gamepad_values::down },
        { R"(PS5_Dpad_Left.svg)", gamepad_values::left },
        { R"(PS5_Dpad_Right.svg)", gamepad_values::right },
        { R"(PS5_Options_Alt.svg)", gamepad_values::start },
        { R"(PS5_Share_Alt.svg)", gamepad_values::back },
        { R"(PS5_Left_Stick_Click.svg)", gamepad_values::left_thumb },
        { R"(PS5_Right_Stick_Click.svg)", gamepad_values::right_thumb },
        { R"(PS5_L1.svg)", gamepad_values::left_shoulder },
        { R"(PS5_R1.svg)", gamepad_values::right_shoulder },
        { R"(PS5_Cross.svg)", gamepad_values::a },
        { R"(PS5_Circle.svg)", gamepad_values::b },
        { R"(PS5_Square.svg)", gamepad_values::x },
        { R"(PS5_Triangle.svg)", gamepad_values::y },
        { R"(PS5_L2.svg)", gamepad_values::left_trigger },
        { R"(PS5_R2.svg)", gamepad_values::right_trigger } };

    inline static std::map<std::string, gamepad_values> gamepad_xbox_icon_name_map = { { R"(XboxSeriesX_Dpad_Up.svg)",
                                                                                           gamepad_values::up },
        { R"(XboxSeriesX_Dpad_Down.svg)", gamepad_values::down },
        { R"(XboxSeriesX_Dpad_Left.svg)", gamepad_values::left },
        { R"(XboxSeriesX_Dpad_Right.svg)", gamepad_values::right },
        { R"(XboxSeriesX_Menu.svg)", gamepad_values::start },
        { R"(XboxSeriesX_View.svg)", gamepad_values::back },
        { R"(XboxSeriesX_Left_Stick_Click.svg)", gamepad_values::left_thumb },
        { R"(XboxSeriesX_Right_Stick_Click.svg)", gamepad_values::right_thumb },
        { R"(XboxSeriesX_LB.svg)", gamepad_values::left_shoulder },
        { R"(XboxSeriesX_RB.svg)", gamepad_values::right_shoulder },
        { R"(XboxSeriesX_A.svg)", gamepad_values::a },
        { R"(XboxSeriesX_B.svg)", gamepad_values::b },
        { R"(XboxSeriesX_X.svg)", gamepad_values::x },
        { R"(XboxSeriesX_Y.svg)", gamepad_values::y },
        { R"(XboxSeriesX_LT.svg)", gamepad_values::left_trigger },
        { R"(XboxSeriesX_RT.svg)", gamepad_values::right_trigger } };

    enum class controller_set : uint32_t { playstation, xbox };
}
